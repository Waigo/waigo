webpackJsonp([2],{

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(17);
	
	var _ = __webpack_require__(14);
	
	var UsersPage = __webpack_require__(26);
	var SendPage = __webpack_require__(27);
	
	var App = React.createClass({
	  displayName: "App",
	
	  getInitialState: function getInitialState() {
	    return {
	      users: [],
	      template: "" };
	  },
	  addUser: function addUser(user) {
	    var existing = _.find(this.state.users, function (u) {
	      return u._id === user._id;
	    });
	
	    if (!existing) {
	      this.setState({
	        users: this.state.users.concat([user])
	      });
	    }
	  },
	  removeUser: function removeUser(userOrId) {
	    if (userOrId._id) {
	      userOrId = userOrId._id;
	    }
	
	    var newUsers = this.state.users.filter(function (u) {
	      return u._id !== userOrId;
	    });
	
	    this.setState({
	      users: newUsers
	    });
	  },
	  clearUsers: function clearUsers() {
	    this.setState({
	      users: []
	    });
	  },
	  render: function render() {
	    return React.createElement(
	      "div",
	      { className: "row page-emails" },
	      React.createElement(
	        "div",
	        { className: "col s12" },
	        React.createElement(
	          "ul",
	          { className: "tabs" },
	          React.createElement(
	            "li",
	            { className: "tab col s3" },
	            React.createElement(
	              "a",
	              { className: "active", href: "#users" },
	              React.createElement(
	                "span",
	                { "class": "badge" },
	                "1."
	              ),
	              " Select users"
	            )
	          ),
	          React.createElement(
	            "li",
	            { className: "tab col s3" },
	            React.createElement(
	              "a",
	              { href: "#send" },
	              React.createElement(
	                "span",
	                { "class": "badge" },
	                "2."
	              ),
	              " Send"
	            )
	          )
	        )
	      ),
	      React.createElement(
	        "section",
	        { className: "tab-content" },
	        React.createElement(
	          "div",
	          { id: "users", className: "col s12" },
	          React.createElement(UsersPage, {
	            users: this.state.users,
	            addUser: this.addUser,
	            removeUser: this.removeUser,
	            clearUsers: this.clearUsers })
	        ),
	        React.createElement(
	          "div",
	          { id: "send", className: "col s12" },
	          React.createElement(SendPage, {
	            users: this.state.users })
	        )
	      )
	    );
	  }
	});
	
	React.render(React.createElement(App, null), document.getElementById("react-root"));

/***/ },

/***/ 26:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(17);
	
	var Button = __webpack_require__(2);
	var ModelTable = __webpack_require__(9);
	
	module.exports = React.createClass({
	  displayName: "exports",
	
	  propTypes: {
	    users: React.PropTypes.array,
	    addUser: React.PropTypes.func },
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      users: [],
	      addUser: null };
	  },
	
	  onRowClick: function onRowClick(user) {
	    this.props.addUser(user);
	  },
	
	  render: function render() {
	    var self = this;
	
	    var columns = [{
	      name: "username"
	    }];
	
	    var users = React.createElement(
	      "em",
	      null,
	      "None selected"
	    );
	
	    if (this.props.users.length) {
	      users = this.props.users.map(function (user) {
	        return React.createElement(
	          "li",
	          { className: "collection-item" },
	          user.username,
	          React.createElement(
	            "a",
	            { href: "#!", className: "secondary-content",
	              "data-id": user._id, onClick: self._onRemoveUser },
	            React.createElement("i", { className: "fa fa-remove" })
	          )
	        );
	      });
	
	      users = React.createElement(
	        "div",
	        null,
	        React.createElement(Button, { label: "Clear all", size: "small", onClick: this._onClear }),
	        React.createElement(
	          "ul",
	          { className: "collection" },
	          users
	        )
	      );
	    }
	
	    return React.createElement(
	      "div",
	      { className: "row" },
	      React.createElement(
	        "div",
	        { className: "col s12 m5" },
	        React.createElement(ModelTable, {
	          modelName: "User",
	          columns: columns,
	          excludeRows: this.props.users,
	          onRowClick: this.onRowClick })
	      ),
	      React.createElement(
	        "div",
	        { className: "col s12 m6 offset-m1 selected-users" },
	        React.createElement(
	          "h2",
	          null,
	          "Selected users:"
	        ),
	        users
	      )
	    );
	  },
	
	  _onRemoveUser: function _onRemoveUser(e) {
	    e.preventDefault();
	
	    this.props.removeUser(e.currentTarget.dataset.id);
	  },
	
	  _onClear: function _onClear() {
	    this.props.clearUsers();
	  } });

/***/ },

/***/ 27:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(17);
	
	var Timer = __webpack_require__(16).Timer;
	
	var RenderUtils = __webpack_require__(15),
	    GuardedStateMixin = __webpack_require__(13);
	
	var Button = __webpack_require__(2),
	    Loader = __webpack_require__(7),
	    TextEditor = __webpack_require__(12);
	
	module.exports = React.createClass({
	  displayName: "exports",
	
	  mixins: [GuardedStateMixin],
	
	  getInitialState: function getInitialState() {
	    return {
	      subject: "",
	      body: "",
	      subjectPreview: "",
	      bodyPreview: "",
	      loading: false,
	      sending: false,
	      error: null,
	      sendError: null };
	  },
	
	  propTypes: {
	    users: React.PropTypes.array },
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      users: [] };
	  },
	
	  render: function render() {
	    var numUsers = this.props.users.length;
	
	    if (!numUsers) {
	      return React.createElement(
	        "em",
	        null,
	        "Please select some users to send to."
	      );
	    }
	
	    var bracketsSyntax = "{{...}}";
	
	    var tips = React.createElement(
	      "p",
	      { className: "tips" },
	      "NOTE: All app-level locals as well as ",
	      React.createElement(
	        "code",
	        null,
	        "recipient"
	      ),
	      " are available as template variables. Use ",
	      React.createElement(
	        "code",
	        null,
	        bracketsSyntax
	      ),
	      " syntax to insert."
	    );
	
	    var loadingAnim = null;
	    if (this.state.loading) {
	      loadingAnim = React.createElement(Loader, { size: "small", inline: true });
	    }
	
	    return React.createElement(
	      "form",
	      { className: "content-send" },
	      tips,
	      React.createElement(
	        "div",
	        { className: "row" },
	        React.createElement(
	          "div",
	          { className: "col m6 s12 fields" },
	          React.createElement(
	            "h2",
	            null,
	            "Markdown"
	          ),
	          React.createElement("input", { type: "text",
	            className: "subject",
	            onKeyUp: this._onSubjectChange,
	            placeholder: "Subject",
	            ref: "subject" }),
	          React.createElement(TextEditor, { height: "400px",
	            onChange: this._onBodyChange,
	            ref: "body" })
	        ),
	        React.createElement(
	          "div",
	          { className: "col m6 m-offset1 s12 preview" },
	          React.createElement(
	            "h2",
	            null,
	            React.createElement(
	              "span",
	              null,
	              "Preview"
	            ),
	            loadingAnim
	          ),
	          RenderUtils.buildError(this.state.error),
	          React.createElement("input", { type: "text", readonly: true, value: this.state.subjectPreview, placeholder: "Subject preview..." }),
	          React.createElement("div", { className: "body",
	            dangerouslySetInnerHTML: { __html: this.state.bodyPreview } })
	        )
	      ),
	      this._buildSendButton()
	    );
	  },
	
	  _buildSendButton: function _buildSendButton() {
	    var numUsers = this.props.users.length;
	
	    var sendButton = null,
	        sendAnim = null,
	        sendBtnLabel = "Send to " + numUsers + " " + (1 == numUsers ? "user" : "users");
	
	    if (this.state.sending) {
	      sendButton = React.createElement(Button, { label: sendBtnLabel, disabled: true });
	      sendAnim = React.createElement(Loader, { inline: true });
	    } else {
	      sendButton = React.createElement(Button, { label: sendBtnLabel, onClick: this._onSend });
	    }
	
	    return React.createElement(
	      "div",
	      { className: "send-info" },
	      sendButton,
	      React.createElement(
	        "div",
	        { className: "send-result" },
	        sendAnim,
	        RenderUtils.buildError(this.state.sendError)
	      )
	    );
	  },
	
	  _onSubjectChange: function _onSubjectChange(e) {
	    this.setState({
	      subject: e.currentTarget.value
	    });
	
	    this._fetchPreview();
	  },
	
	  _onBodyChange: function _onBodyChange(text) {
	    this.setState({
	      body: text
	    });
	
	    this._fetchPreview();
	  },
	
	  _fetchPreview: function _fetchPreview() {
	    var self = this;
	
	    // if not users don't fetch
	    if (!this.props.users.length) {
	      return;
	    }
	
	    // give time for multiple successive template changes to take place
	    if (self._fetchPreviewTimer) {
	      self._fetchPreviewTimer.stop();
	    }
	
	    self._fetchPreviewTimer = Timer(function () {
	
	      self.setState({
	        loading: true,
	        error: null });
	
	      // fetch collection rows
	      $.ajax({
	        url: "/admin/emails/render?format=json",
	        method: "POST",
	        data: {
	          subject: self.state.subject,
	          body: self.state.body,
	          user: self.props.users[0]._id
	        }
	      }).done(function (data) {
	        self.setStateIfMounted({
	          subjectPreview: data.subject || "",
	          bodyPreview: data.body || "" });
	      }).fail(function (xhr) {
	        self.setStateIfMounted({
	          error: xhr
	        });
	      }).always(function () {
	        self.setStateIfMounted({
	          loading: false });
	      });
	    }, 300).start();
	  },
	
	  _onSend: function _onSend() {
	    var self = this;
	
	    // if not users don't fetch
	    if (!this.props.users.length) {
	      return;
	    }
	
	    this.setState({
	      sending: true,
	      sendError: null });
	
	    // fetch collection rows
	    $.ajax({
	      url: "/admin/emails/send?format=json",
	      method: "POST",
	      data: {
	        subject: self.state.subject,
	        body: self.state.body,
	        users: self.props.users.map(function (v) {
	          return v._id;
	        }) }
	    }).done(function () {
	      Materialize.toast("Email succesfully sent", 2000, "rounded");
	
	      // clear inputs
	      self.refs.body.clear();
	      React.findDOMNode(self.refs.subject).value = "";
	
	      self.setStateIfMounted({
	        subject: "",
	        body: "",
	        subjectPreview: "",
	        bodyPreview: "" });
	    }).fail(function (xhr) {
	      self.setStateIfMounted({
	        sendError: xhr
	      });
	    }).always(function () {
	      self.setStateIfMounted({
	        sending: false });
	    });
	  } });

/***/ }

});
//# sourceMappingURL=data:application/json;base64,