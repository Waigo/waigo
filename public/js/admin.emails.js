webpackJsonp([0],{

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(11);
	
	var _ = __webpack_require__(218);
	
	var UsersPage = __webpack_require__(223);
	var SendPage = __webpack_require__(224);
	
	var App = React.createClass({
	  displayName: "App",
	
	  getInitialState: function getInitialState() {
	    return {
	      users: [],
	      template: "" };
	  },
	  addUser: function addUser(user) {
	    var existing = _.find(this.state.users, function (u) {
	      return u._id === user._id;
	    });
	
	    if (!existing) {
	      this.setState({
	        users: this.state.users.concat([user])
	      });
	    }
	  },
	  removeUser: function removeUser(userOrId) {
	    if (userOrId._id) {
	      userOrId = userOrId._id;
	    }
	
	    var newUsers = this.state.users.filter(function (u) {
	      return u._id !== userOrId;
	    });
	
	    this.setState({
	      users: newUsers
	    });
	  },
	  clearUsers: function clearUsers() {
	    this.setState({
	      users: []
	    });
	  },
	  render: function render() {
	    return React.createElement(
	      "div",
	      { className: "row page-emails" },
	      React.createElement(
	        "div",
	        { className: "col s12" },
	        React.createElement(
	          "ul",
	          { className: "tabs" },
	          React.createElement(
	            "li",
	            { className: "tab col s3" },
	            React.createElement(
	              "a",
	              { className: "active", href: "#users" },
	              React.createElement(
	                "span",
	                { "class": "badge" },
	                "1."
	              ),
	              " Select users"
	            )
	          ),
	          React.createElement(
	            "li",
	            { className: "tab col s3" },
	            React.createElement(
	              "a",
	              { href: "#send" },
	              React.createElement(
	                "span",
	                { "class": "badge" },
	                "2."
	              ),
	              " Send"
	            )
	          )
	        )
	      ),
	      React.createElement(
	        "section",
	        { className: "tab-content" },
	        React.createElement(
	          "div",
	          { id: "users", className: "col s12" },
	          React.createElement(UsersPage, {
	            users: this.state.users,
	            addUser: this.addUser,
	            removeUser: this.removeUser,
	            clearUsers: this.clearUsers })
	        ),
	        React.createElement(
	          "div",
	          { id: "send", className: "col s12" },
	          React.createElement(SendPage, {
	            users: this.state.users })
	        )
	      )
	    );
	  }
	});
	
	React.render(React.createElement(App, null), document.getElementById("react-root"));

/***/ },

/***/ 223:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(11);
	
	var Button = __webpack_require__(208);
	var ModelTable = __webpack_require__(217);
	
	module.exports = React.createClass({
	  displayName: "exports",
	
	  propTypes: {
	    users: React.PropTypes.array,
	    addUser: React.PropTypes.func },
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      users: [],
	      addUser: null };
	  },
	
	  onRowClick: function onRowClick(user) {
	    this.props.addUser(user);
	  },
	
	  render: function render() {
	    var self = this;
	
	    var columns = [{
	      name: "username"
	    }];
	
	    var users = React.createElement(
	      "em",
	      null,
	      "None selected"
	    );
	
	    if (this.props.users.length) {
	      users = this.props.users.map(function (user) {
	        return React.createElement(
	          "li",
	          { className: "collection-item" },
	          user.username,
	          React.createElement(
	            "a",
	            { href: "#!", className: "secondary-content",
	              "data-id": user._id, onClick: self._onRemoveUser },
	            React.createElement("i", { className: "fa fa-remove" })
	          )
	        );
	      });
	
	      users = React.createElement(
	        "div",
	        null,
	        React.createElement(Button, { label: "Clear all", size: "small", onClick: this._onClear }),
	        React.createElement(
	          "ul",
	          { className: "collection" },
	          users
	        )
	      );
	    }
	
	    return React.createElement(
	      "div",
	      { className: "row" },
	      React.createElement(
	        "div",
	        { className: "col s12 m5" },
	        React.createElement(ModelTable, {
	          modelName: "User",
	          columns: columns,
	          excludeRows: this.props.users,
	          onRowClick: this.onRowClick })
	      ),
	      React.createElement(
	        "div",
	        { className: "col s12 m6 offset-m1 selected-users" },
	        React.createElement(
	          "h2",
	          null,
	          "Selected users:"
	        ),
	        users
	      )
	    );
	  },
	
	  _onRemoveUser: function _onRemoveUser(e) {
	    e.preventDefault();
	
	    this.props.removeUser(e.currentTarget.dataset.id);
	  },
	
	  _onClear: function _onClear() {
	    this.props.clearUsers();
	  } });

/***/ },

/***/ 224:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(11);
	
	var Timer = __webpack_require__(1).Timer;
	
	var RenderUtils = __webpack_require__(213),
	    GuardedStateMixin = __webpack_require__(214);
	
	var Button = __webpack_require__(208),
	    Loader = __webpack_require__(212),
	    TextEditor = __webpack_require__(222);
	
	module.exports = React.createClass({
	  displayName: "exports",
	
	  mixins: [GuardedStateMixin],
	
	  getInitialState: function getInitialState() {
	    return {
	      template: "",
	      rendered: "",
	      loading: false,
	      error: null };
	  },
	
	  propTypes: {
	    users: React.PropTypes.array },
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      users: [] };
	  },
	
	  render: function render() {
	    var numUsers = this.props.users.length;
	
	    if (!numUsers) {
	      return React.createElement(
	        "em",
	        null,
	        "Please select some users to send to."
	      );
	    }
	
	    var sendBtnLabel = "Send to " + numUsers + " " + (1 == numUsers ? "user" : "users");
	
	    var bracketsSyntax = "{{...}}";
	
	    var tips = React.createElement(
	      "p",
	      { className: "tips" },
	      "NOTE: All app-level locals as well as ",
	      React.createElement(
	        "code",
	        null,
	        "recipient"
	      ),
	      " are available as template variables. Use ",
	      React.createElement(
	        "code",
	        null,
	        bracketsSyntax
	      ),
	      " syntax to insert."
	    );
	
	    var loadingAnim = null;
	
	    if (this.state.loading) {
	      loadingAnim = React.createElement(Loader, { size: "small", inline: true });
	    }
	
	    return React.createElement(
	      "div",
	      { className: "content-send" },
	      tips,
	      React.createElement(
	        "div",
	        { className: "row" },
	        React.createElement(
	          "div",
	          { className: "col m6 s12" },
	          React.createElement(
	            "h2",
	            null,
	            "Markdown"
	          ),
	          React.createElement(TextEditor, { height: "400px", onChange: this._onTemplateUpdate })
	        ),
	        React.createElement(
	          "div",
	          { className: "col m6 m-offset1 s12" },
	          React.createElement(
	            "h2",
	            null,
	            React.createElement(
	              "span",
	              null,
	              "Preview"
	            ),
	            loadingAnim
	          ),
	          RenderUtils.buildError(this.state.error),
	          React.createElement("div", { className: "preview",
	            dangerouslySetInnerHTML: { __html: this.state.rendered } })
	        )
	      ),
	      React.createElement(Button, { label: sendBtnLabel })
	    );
	  },
	
	  _onTemplateUpdate: function _onTemplateUpdate(text) {
	    this.setState({
	      template: text
	    });
	
	    this._fetchPreview();
	  },
	
	  _fetchPreview: function _fetchPreview() {
	    var self = this;
	
	    // if not users don't fetch
	    if (!this.props.users.length) {
	      return;
	    }
	
	    // give time for multiple successive template changes to take place
	    if (self._fetchPreviewTimer) {
	      self._fetchPreviewTimer.stop();
	    }
	
	    self._fetchPreviewTimer = Timer(function () {
	
	      self.setState({
	        loading: true,
	        error: null });
	
	      // fetch collection rows
	      $.ajax({
	        url: "/admin/emails/render?format=json",
	        method: "POST",
	        data: {
	          template: self.state.template,
	          user: self.props.users[0]._id
	        }
	      }).done(function (data) {
	        self.setStateIfMounted({
	          rendered: data.html });
	      }).fail(function (xhr) {
	        self.setStateIfMounted({
	          error: xhr
	        });
	      }).always(function () {
	        self.setStateIfMounted({
	          loading: false });
	      });
	    }, 300).start();
	  } });

/***/ }

});
//# sourceMappingURL=data:application/json;base64,