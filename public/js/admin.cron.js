webpackJsonp([4],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(4);
	
	var _ = __webpack_require__(19);
	
	var Collapsible = __webpack_require__(8),
	    Loader = __webpack_require__(12),
	    RenderUtils = __webpack_require__(20),
	    GuardedStateMixin = __webpack_require__(18);
	
	var App = React.createClass({
	  displayName: "App",
	
	  mixins: [GuardedStateMixin],
	
	  getInitialState: function getInitialState() {
	    return {
	      listLoading: true,
	      taskRunning: false,
	      tasks: [] };
	  },
	
	  render: function render() {
	    var list = this._buildList();
	
	    var loader = this.state.taskRunning ? React.createElement(Loader, null) : null;
	
	    return React.createElement(
	      "div",
	      { className: "page-cron" },
	      React.createElement(
	        "h2",
	        null,
	        "Cron tasks"
	      ),
	      loader,
	      RenderUtils.buildError(this.state.error),
	      list
	    );
	  },
	
	  componentDidMount: function componentDidMount() {
	    var self = this;
	
	    $.ajax({
	      url: "/admin/cron",
	      data: {
	        format: "json" }
	    }).done(function (data) {
	      self.setStateIfMounted({
	        items: _.values(data.tasks) });
	    }).fail(function (xhr) {
	      self.setStateIfMounted({
	        error: xhr
	      });
	    }).always(function () {
	      self.setStateIfMounted({
	        listLoading: false
	      });
	    });
	  },
	
	  _buildList: function _buildList() {
	    var self = this;
	
	    if (this.state.listLoading) {
	      return React.createElement(Loader, null);
	    } else {
	      var items = this.state.items.map(function (item) {
	        return {
	          label: self._buildItemLabel(item),
	          body: self._buildItemBody(item) };
	      });
	
	      return React.createElement(Collapsible, { items: items });
	    }
	  },
	
	  _buildItemLabel: function _buildItemLabel(item) {
	    var status = item.disabled ? "inactive" : "active";
	
	    return React.createElement(
	      "span",
	      { className: "item-label" },
	      React.createElement(
	        "span",
	        { className: status },
	        item.name
	      )
	    );
	  },
	
	  _buildItemBody: function _buildItemBody(item) {
	    return React.createElement(
	      "div",
	      null,
	      React.createElement(
	        "a",
	        { href: "#", "data-name": item.name, onClick: this._run },
	        React.createElement("i", { className: "fa fa-play" })
	      )
	    );
	  },
	
	  _run: function _run(e) {
	    var self = this;
	
	    e.preventDefault();
	
	    // do one at a time
	    if (this.state.taskRunning) {
	      return;
	    }
	
	    self.setState({
	      taskRunning: true,
	      error: null });
	
	    var name = e.currentTarget.dataset.name;
	
	    $.ajax({
	      method: "POST",
	      url: "/admin/cron/run?format=json",
	      data: {
	        name: name }
	    }).done(function (data) {
	      Materialize.toast("Run successful: " + name, 2000, "rounded");
	    }).fail(function (xhr) {
	      self.setStateIfMounted({
	        error: xhr
	      });
	    }).always(function () {
	      self.setStateIfMounted({
	        taskRunning: false
	      });
	    });
	  } });
	
	React.render(React.createElement(App, null), document.getElementById("react-root"));

/***/ }
]);
//# sourceMappingURL=data:application/json;base64,