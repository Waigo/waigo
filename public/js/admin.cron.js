webpackJsonp([1],{

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(19);
	
	var _ = __webpack_require__(17);
	
	var Collapsible = __webpack_require__(5),
	    Loader = __webpack_require__(9),
	    RenderUtils = __webpack_require__(18),
	    GuardedStateMixin = __webpack_require__(16);
	
	var CronItemHeader = __webpack_require__(25),
	    CronItemBody = __webpack_require__(26);
	
	var App = React.createClass({
	  displayName: "App",
	
	  mixins: [GuardedStateMixin],
	
	  getInitialState: function getInitialState() {
	    return {
	      loading: true,
	      tasks: [] };
	  },
	
	  render: function render() {
	    var list = this._buildList();
	
	    var loader = this.state.taskRunning ? React.createElement(Loader, null) : null;
	
	    return React.createElement(
	      "div",
	      { className: "page-cron" },
	      React.createElement(
	        "h2",
	        null,
	        "Cron tasks"
	      ),
	      loader,
	      RenderUtils.buildError(this.state.error),
	      list
	    );
	  },
	
	  componentDidMount: function componentDidMount() {
	    var self = this;
	
	    $.ajax({
	      url: "/admin/cron",
	      data: {
	        format: "json" }
	    }).done(function (data) {
	      self.setStateIfMounted({
	        tasks: _.values(data.tasks) });
	    }).fail(function (xhr) {
	      self.setStateIfMounted({
	        error: xhr
	      });
	    }).always(function () {
	      self.setStateIfMounted({
	        loading: false
	      });
	    });
	  },
	
	  _setItem: function _setItem(itemNewData) {
	    // loop through our list, and overwrite item
	    this.state.tasks.forEach(function (item) {
	      if (item._id === itemNewData._id) {
	        _.extend(item, itemNewData);
	      }
	    });
	
	    // force re-render
	    this.forceUpdate();
	  },
	
	  _buildList: function _buildList() {
	    var self = this;
	
	    if (this.state.loading) {
	      return React.createElement(Loader, null);
	    } else {
	      var tasks = this.state.tasks.map(function (item) {
	        return {
	          label: React.createElement(CronItemHeader, { item: item }),
	          body: React.createElement(CronItemBody, { item: item, reloadItem: self._setItem }) };
	      });
	
	      return React.createElement(Collapsible, { items: tasks });
	    }
	  } });
	
	React.render(React.createElement(App, null), document.getElementById("react-root"));

/***/ },

/***/ 25:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(19);
	var Router = __webpack_require__(21);
	
	module.exports = React.createClass({
	  displayName: "exports",
	
	  propTypes: {
	    item: React.PropTypes.object },
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      item: null };
	  },
	
	  render: function render() {
	    var item = this.props.item;
	
	    var status = "status " + (item.disabled ? "inactive" : "active");
	
	    return React.createElement(
	      "span",
	      { className: "item-label" },
	      React.createElement(
	        "span",
	        { className: status },
	        item.name
	      )
	    );
	  } });

/***/ },

/***/ 26:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(19);
	var Router = __webpack_require__(21);
	var moment = __webpack_require__(22);
	
	var Button = __webpack_require__(3),
	    Switch = __webpack_require__(14),
	    Loader = __webpack_require__(9),
	    RenderUtils = __webpack_require__(18),
	    GuardedStateMixin = __webpack_require__(16);
	
	module.exports = React.createClass({
	  displayName: "exports",
	
	  mixins: [GuardedStateMixin],
	
	  propTypes: {
	    item: React.PropTypes.object,
	    reloadItem: React.PropTypes.func },
	
	  getInitialState: function getInitialState() {
	    return {
	      loading: false,
	      error: null };
	  },
	
	  render: function render() {
	    var item = this.props.item;
	
	    if (item.lastRun) {
	      var lastRun = React.createElement(
	        "span",
	        null,
	        React.createElement(
	          "span",
	          { className: "date", title: item.lastRun.when },
	          moment(item.lastRun.when).fromNow()
	        ),
	        React.createElement(
	          "span",
	          { className: "by" },
	          item.lastRun.by.length ? item.lastRun.by : ""
	        )
	      );
	    } else {
	      var lastRun = "never";
	    }
	
	    if (!item.disabled) {
	      var nextRun = React.createElement(
	        "span",
	        { className: "date", title: item.nextRun },
	        moment(item.nextRun).fromNow()
	      );
	    } else {
	      var nextRun = React.createElement(
	        "em",
	        null,
	        "Inactive"
	      );
	    }
	
	    var loading = this.state.loading ? React.createElement(Loader, null) : null;
	
	    return React.createElement(
	      "div",
	      { className: "item-body" },
	      React.createElement(
	        "div",
	        { className: "row" },
	        React.createElement(
	          "div",
	          { className: "col m12 s12" },
	          React.createElement(
	            "div",
	            { className: "row" },
	            React.createElement(
	              "div",
	              { className: "item-label col m2 s12" },
	              "Schedule:"
	            ),
	            React.createElement(
	              "div",
	              { className: "schedule col m1 s12" },
	              item.schedule
	            ),
	            React.createElement(
	              "div",
	              { className: "item-toggle col m9 s12" },
	              React.createElement(Switch, { data: item, onChange: this._updateStatus, initiallyOn: !item.disabled })
	            )
	          ),
	          React.createElement(
	            "div",
	            { className: "row" },
	            React.createElement(
	              "div",
	              { className: "item-label col m2 s12" },
	              "Last run:"
	            ),
	            React.createElement(
	              "div",
	              { className: "lastRun col m10 s12" },
	              lastRun
	            )
	          ),
	          React.createElement(
	            "div",
	            { className: "row" },
	            React.createElement(
	              "div",
	              { className: "item-label col m2 s12" },
	              "Next run:"
	            ),
	            React.createElement(
	              "div",
	              { className: "nextRun col m10 s12" },
	              nextRun
	            )
	          )
	        )
	      ),
	      React.createElement(Button, { label: "Run now", onClick: this._run }),
	      loading,
	      RenderUtils.buildError(this.state.error)
	    );
	
	    // <a href="#" data-name={item.name} onClick={this._run}>
	    //   <i className="fa fa-play" />
	    // </a>
	  },
	
	  _updateStatus: function _updateStatus(setActive) {
	    var self = this;
	
	    self.setState({
	      error: null,
	      loading: true });
	
	    $.ajax({
	      method: "POST",
	      url: "/admin/cron/updateStatus?format=json",
	      data: {
	        name: this.props.item.name,
	        active: setActive }
	    }).done(function (data) {
	      Materialize.toast("Status updated", 2000, "rounded");
	
	      self.props.reloadItem(data.task);
	    }).fail(function (xhr) {
	      self.setStateIfMounted({
	        error: xhr
	      });
	    }).always(function () {
	      self.setStateIfMounted({
	        loading: false
	      });
	    });
	  },
	
	  _run: function _run(e) {
	    var self = this;
	
	    e.preventDefault();
	
	    self.setState({
	      loading: true,
	      error: null });
	
	    $.ajax({
	      method: "POST",
	      url: "/admin/cron/run?format=json",
	      data: {
	        name: this.props.item.name }
	    }).done(function (data) {
	      Materialize.toast("Run successful", 2000, "rounded");
	
	      self.props.reloadItem(data.task);
	    }).fail(function (xhr) {
	      self.setStateIfMounted({
	        error: xhr
	      });
	    }).always(function () {
	      self.setStateIfMounted({
	        loading: false
	      });
	    });
	  } });

/***/ }

});
//# sourceMappingURL=data:application/json;base64,