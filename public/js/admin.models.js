webpackJsonp([2],{

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(17);
	var Router = __webpack_require__(18);
	var DefaultRoute = Router.DefaultRoute;
	var RouteHandler = Router.RouteHandler;
	var Route = Router.Route;
	
	var Models = __webpack_require__(25);
	var Model = __webpack_require__(26);
	var Row = __webpack_require__(27);
	
	var App = React.createClass({
	  displayName: "App",
	
	  render: function render() {
	    return React.createElement(RouteHandler, this.props);
	  }
	});
	
	var routes = React.createElement(
	  Route,
	  { handler: App },
	  React.createElement(DefaultRoute, { name: "models", handler: Models }),
	  React.createElement(Route, { name: "model", path: "/:key", handler: Model }),
	  React.createElement(Route, { name: "modelRow", path: "/:key/:id", handler: Row })
	);
	
	Router.run(routes, Router.HashLocation, function (Handler, state) {
	  React.render(React.createElement(Handler, { routes: state.routes, params: state.params, query: state.query }), document.getElementById("react-root"));
	});

/***/ },

/***/ 25:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(17);
	
	var Router = __webpack_require__(18),
	    Link = Router.Link;
	
	var FilterList = __webpack_require__(5),
	    RenderUtils = __webpack_require__(15);
	
	module.exports = React.createClass({
	  displayName: "exports",
	
	  render: function render() {
	    return React.createElement(
	      "div",
	      { className: "page-models" },
	      React.createElement(FilterList, {
	        ajaxUrl: "/admin/models?format=json",
	        ajaxResponseDataMapper: this._mapAjaxData,
	        itemDisplayNameFormatter: this._getItemDisplayName,
	        itemRoute: "model" })
	    );
	  },
	
	  _mapAjaxData: function _mapAjaxData(data) {
	    data = data || {};
	
	    return (data.models || []).map(function (r) {
	      return {
	        key: r,
	        name: r };
	    });
	  },
	
	  _getItemDisplayName: function _getItemDisplayName(item) {
	    return React.createElement(
	      "span",
	      null,
	      item.name
	    );
	  } });

/***/ },

/***/ 26:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(17);
	var Router = __webpack_require__(18);
	var Link = Router.Link;
	
	var Timer = __webpack_require__(16).Timer;
	
	var _ = __webpack_require__(14),
	    Loader = __webpack_require__(7),
	    RenderUtils = __webpack_require__(15),
	    ModelTable = __webpack_require__(9),
	    Button = __webpack_require__(2),
	    GuardedStateMixin = __webpack_require__(13);
	
	module.exports = React.createClass({
	  displayName: "exports",
	
	  contextTypes: {
	    router: React.PropTypes.func
	  },
	
	  mixins: [GuardedStateMixin],
	
	  getInitialState: function getInitialState() {
	    return {
	      modelName: decodeURIComponent(this.context.router.getCurrentParams().key),
	      columns: null };
	  },
	
	  _onRowClick: function _onRowClick(item) {
	    this.context.router.transitionTo("modelRow", {
	      key: this.context.router.getCurrentParams().key,
	      id: item._id
	    });
	  },
	
	  _onAddClick: function _onAddClick() {
	    this.context.router.transitionTo("modelRow", {
	      key: this.context.router.getCurrentParams().key,
	      id: "new"
	    });
	  },
	
	  render: function render() {
	    var result = null;
	
	    if (!this.state.columns) {
	      result = React.createElement(
	        "div",
	        null,
	        React.createElement(Loader, { text: "Loading structure" }),
	        RenderUtils.buildError(this.state.error)
	      );
	    } else {
	      result = React.createElement(ModelTable, {
	        modelName: this.state.modelName,
	        columns: this.state.columns,
	        onRowClick: this._onRowClick });
	    }
	
	    return React.createElement(
	      "div",
	      { className: "page-model" },
	      React.createElement(Button, { icon: "plus-circle", label: "Add", className: "add-button", onClick: this._onAddClick }),
	      React.createElement(
	        "h2",
	        null,
	        React.createElement(
	          Link,
	          { to: "models" },
	          "Collection"
	        ),
	        React.createElement(
	          "span",
	          null,
	          " / ",
	          this.state.modelName
	        )
	      ),
	      result
	    );
	  },
	
	  componentDidMount: function componentDidMount() {
	    var self = this;
	
	    // fetch column info
	    $.ajax({
	      url: "/admin/models/model/columns",
	      data: {
	        format: "json",
	        name: this.state.modelName }
	    }).done(function (data) {
	      self.setStateIfMounted({
	        columns: data.columns
	      });
	    }).fail(function (xhr) {
	      self.setStateIfMounted({
	        error: xhr
	      });
	    });
	    ;
	  } });

/***/ },

/***/ 27:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _core = __webpack_require__(56)["default"];
	
	var React = __webpack_require__(17);
	var Router = __webpack_require__(18);
	var Link = Router.Link;
	
	var Loader = __webpack_require__(7),
	    Button = __webpack_require__(2),
	    JsonEditor = __webpack_require__(6),
	    Modal = __webpack_require__(8),
	    RenderUtils = __webpack_require__(15),
	    GuardedStateMixin = __webpack_require__(13);
	
	module.exports = React.createClass({
	  displayName: "exports",
	
	  contextTypes: {
	    router: React.PropTypes.func
	  },
	
	  mixins: [GuardedStateMixin],
	
	  getInitialState: function getInitialState() {
	    var params = this.context.router.getCurrentParams();
	
	    return {
	      modelName: decodeURIComponent(params.key),
	      id: decodeURIComponent(params.id),
	      error: null };
	  },
	
	  render: function render() {
	    var editingForm = this._buildEditingForm();
	
	    return React.createElement(
	      "div",
	      { className: "page-modelRow" },
	      React.createElement(
	        "h2",
	        { className: "title" },
	        React.createElement(
	          Link,
	          { to: "model", params: { key: this.state.modelName } },
	          this.state.modelName
	        ),
	        React.createElement(
	          "span",
	          null,
	          " / ",
	          this.state.id
	        )
	      ),
	      RenderUtils.buildError(this.state.error),
	      editingForm
	    );
	  },
	
	  componentDidMount: function componentDidMount() {
	    this._load();
	  },
	
	  _buildEditingForm: function _buildEditingForm() {
	    if (undefined === this.state.jsonStr) {
	      return React.createElement(Loader, { text: "Loading data" });
	    }
	
	    var json = this.state.jsonStr ? JSON.parse(this.state.jsonStr) : null;
	
	    var deleteButton = null,
	        saveBtnLabel = "Create";
	
	    if ("new" !== this.state.id) {
	      saveBtnLabel = "Update";
	
	      deleteButton = React.createElement(Button, { label: "Delete", color: "red", onClick: this._showDeleteModal });
	    }
	
	    return React.createElement(
	      "div",
	      null,
	      React.createElement(JsonEditor, {
	        onChange: this._onDataChange,
	        value: json,
	        height: "400px",
	        ref: "editor" }),
	      React.createElement(
	        "div",
	        { className: "actions" },
	        React.createElement(Button, { label: saveBtnLabel, disabled: !json, onClick: this._save }),
	        deleteButton
	      ),
	      React.createElement(
	        Modal,
	        {
	          ref: "deleteModal",
	          id: "deleteDocModal",
	          actions: ["Yes", "No"],
	          onAction: this._onDeleteModalAction },
	        React.createElement(
	          "span",
	          null,
	          "Are you sure you want to remove this document from the collection?"
	        )
	      )
	    );
	  },
	
	  _onDataChange: function _onDataChange(jsonStr) {
	    try {
	      var json = JSON.parse(jsonStr);
	
	      // must not be empty object
	      if (!json || !_core.Object.keys(json).length) {
	        throw new Error();
	      }
	
	      this.setState({
	        jsonStr: jsonStr
	      });
	    } catch (err) {
	      this.setState({
	        jsonStr: null
	      });
	    }
	  },
	
	  _load: function _load() {
	    var self = this;
	
	    // if creating a new item then no need to fetch data to start with
	    if ("new" === this.state.id) {
	      return this.setState({
	        jsonStr: {}
	      });
	    }
	
	    $.ajax({
	      url: "/admin/models/model/doc",
	      data: {
	        format: "json",
	        name: this.state.modelName,
	        id: this.state.id }
	    }).done(function (data) {
	      var doc = JSON.parse(data.doc);
	
	      // remove id attribute
	      delete doc._id;
	
	      self.setStateIfMounted({
	        jsonStr: JSON.stringify(doc)
	      });
	    }).fail(function (xhr) {
	      self.setStateIfMounted({
	        error: xhr
	      });
	    });
	    ;
	  },
	
	  _update: function _update() {
	    var self = this;
	
	    this.setState({
	      submitting: true,
	      error: null
	    });
	
	    $.ajax({
	      method: "PUT",
	      url: "/admin/models/model/doc?format=json&name=" + this.state.modelName + "&id=" + this.state.id,
	      data: {
	        doc: this.state.jsonStr
	      }
	    }).then(function () {
	      Materialize.toast("Update successful", 2000, "rounded");
	    }).fail(function (xhr) {
	      self.setStateIfMounted({
	        error: xhr
	      });
	    }).always(function () {
	      self.setStateIfMounted({
	        submitting: false
	      });
	    });
	  },
	
	  _create: function _create() {
	    var self = this;
	
	    this.setState({
	      submitting: true,
	      error: null
	    });
	
	    $.ajax({
	      method: "POST",
	      url: "/admin/models/model/doc?format=json&name=" + this.state.modelName,
	      data: {
	        doc: this.state.jsonStr
	      }
	    }).then(function (data) {
	      Materialize.toast("Create successful", 2000, "rounded");
	
	      var doc = JSON.parse(data.doc),
	          id = doc._id;
	
	      delete doc._id;
	
	      self.setStateIfMounted({
	        id: id,
	        jsonStr: JSON.stringify(doc) });
	    }).fail(function (xhr) {
	      self.setStateIfMounted({
	        error: xhr
	      });
	    }).always(function () {
	      self.setStateIfMounted({
	        submitting: false
	      });
	    });
	  },
	
	  _save: function _save() {
	    if ("new" === this.state.id) {
	      this._create();
	    } else {
	      this._update();
	    }
	  },
	
	  _delete: function _delete() {
	    var self = this;
	
	    this.setState({
	      submitting: true,
	      error: null });
	
	    $.ajax({
	      method: "DELETE",
	      url: "/admin/models/model/doc?format=json&name=" + this.state.modelName + "&id=" + this.state.id }).then(function () {
	      Materialize.toast("Delete successful", 2000, "rounded");
	
	      self.context.router.transitionTo("model", {
	        key: self.context.router.getCurrentParams().key });
	    }).fail(function (xhr) {
	      self.setStateIfMounted({
	        error: xhr
	      });
	    }).always(function () {
	      self.setStateIfMounted({
	        submitting: false
	      });
	    });
	  },
	
	  _showDeleteModal: function _showDeleteModal() {
	    this.refs.deleteModal.open();
	  },
	
	  _onDeleteModalAction: function _onDeleteModalAction(action) {
	    if ("yes" === action.toLowerCase()) {
	      this._delete();
	    }
	  } });

/***/ }

});
//# sourceMappingURL=data:application/json;base64,