webpackJsonp([0],{

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(17);
	var Router = __webpack_require__(18);
	var DefaultRoute = Router.DefaultRoute;
	var RouteHandler = Router.RouteHandler;
	var Route = Router.Route;
	
	var PageRoutes = __webpack_require__(21);
	var PageRoute = __webpack_require__(22);
	
	var App = React.createClass({
	  displayName: "App",
	
	  render: function render() {
	    return React.createElement(RouteHandler, this.props);
	  }
	});
	
	var routes = React.createElement(
	  Route,
	  { handler: App },
	  React.createElement(DefaultRoute, { name: "routes", handler: PageRoutes }),
	  React.createElement(Route, { name: "route", path: ":key", handler: PageRoute })
	);
	
	Router.run(routes, Router.HashLocation, function (Handler, state) {
	  React.render(React.createElement(Handler, { routes: state.routes, params: state.params, query: state.query }), document.getElementById("react-root"));
	});

/***/ },

/***/ 21:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(17);
	
	var Router = __webpack_require__(18),
	    Link = Router.Link;
	
	var FilterList = __webpack_require__(5),
	    RenderUtils = __webpack_require__(15);
	
	module.exports = React.createClass({
	  displayName: "exports",
	
	  render: function render() {
	    return React.createElement(
	      "div",
	      { className: "page-routes" },
	      React.createElement(FilterList, {
	        ajaxUrl: "/admin/routes?format=json",
	        ajaxResponseDataMapper: this._mapAjaxData,
	        itemDisplayNameFormatter: this._getItemDisplayName,
	        itemRoute: "route" })
	    );
	  },
	
	  _mapAjaxData: function _mapAjaxData(data) {
	    data = data || {};
	
	    return (data.routes || []).map(function (r) {
	      // GET /example/path  -- >  get/example/path
	      r.key = r.method.toLowerCase() + r.url.toLowerCase();
	
	      return r;
	    });
	  },
	
	  _getItemDisplayName: function _getItemDisplayName(item) {
	    return React.createElement(
	      "span",
	      null,
	      React.createElement(
	        "span",
	        { className: "method" },
	        item.method.toUpperCase()
	      ),
	      React.createElement(
	        "span",
	        { className: "url" },
	        item.url
	      )
	    );
	  } });

/***/ },

/***/ 22:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(17);
	
	var Router = __webpack_require__(18);
	
	var Loader = __webpack_require__(7),
	    SubmitBtn = __webpack_require__(11),
	    JsonEditor = __webpack_require__(6),
	    CodeView = __webpack_require__(3),
	    RenderUtils = __webpack_require__(15),
	    GuardedStateMixin = __webpack_require__(13);
	
	module.exports = React.createClass({
	  displayName: "exports",
	
	  contextTypes: {
	    router: React.PropTypes.func
	  },
	
	  mixins: [GuardedStateMixin],
	
	  getInitialState: function getInitialState() {
	    var key = decodeURIComponent(this.context.router.getCurrentParams().key),
	        slashPos = key.indexOf("/"),
	        method = key.substr(0, slashPos).toUpperCase(),
	        url = key.substr(slashPos);
	
	    return {
	      url: url,
	      method: method,
	      reqQuery: {},
	      reqBody: {} };
	  },
	
	  onSubmit: function onSubmit(e) {
	    e.preventDefault();
	
	    var self = this;
	
	    var qryStr = $.param(this.state.reqQuery),
	        body = this.state.reqBody;
	
	    this.setState({
	      result: null,
	      running: true });
	
	    $.ajax({
	      async: true,
	      timeout: 5000,
	      cache: false,
	      url: this.state.url + (qryStr.length ? "?" + qryStr : ""),
	      method: this.state.method,
	      dataType: "text",
	      data: body }).done(function gotResult() {
	      self.setStateIfMounted({
	        result: {
	          xhr: arguments[2] }
	      });
	    }).fail(function gotError(xhr) {
	      self.setStateIfMounted({
	        result: {
	          xhr: xhr
	        }
	      });
	    }).always(function allDone() {
	      self.setStateIfMounted({
	        running: false });
	    });
	  },
	
	  _buildResult: function _buildResult() {
	    if (this.state.result) {
	      var xhr = this.state.result.xhr;
	
	      var data = xhr.responseText,
	          resultType = 400 <= xhr.status ? "error" : "success";
	
	      var mime = xhr.getResponseHeader("Content-Type");
	
	      var label = "label " + ("error" === resultType ? "red" : "blue");
	
	      return React.createElement(
	        "div",
	        { className: "result" },
	        React.createElement(
	          "div",
	          { className: resultType },
	          React.createElement(
	            "p",
	            { className: "meta" },
	            React.createElement(
	              "span",
	              { className: label },
	              xhr.status,
	              " ",
	              xhr.statusText
	            ),
	            React.createElement(
	              "span",
	              { className: label },
	              mime
	            ),
	            React.createElement(
	              "span",
	              { className: label },
	              xhr.getResponseHeader("Content-Length"),
	              " bytes"
	            )
	          ),
	          React.createElement(CodeView, { mime: mime, code: data })
	        )
	      );
	    } else {
	      if (this.state.running) {
	        return React.createElement(Loader, { text: "Request in progress" });
	      } else {
	        return "";
	      }
	    }
	  },
	
	  _onQueryStringChange: function _onQueryStringChange(val) {
	    try {
	      this.setState({
	        reqQuery: val.length ? JSON.parse(val) : {},
	        canSubmit: true });
	    } catch (err) {
	      this.setState({
	        reqQuery: {},
	        canSubmit: false
	      });
	    }
	  },
	
	  _onBodyChange: function _onBodyChange(val) {
	    try {
	      this.setState({
	        reqBody: val.length ? JSON.parse(val) : {},
	        canSubmit: true });
	    } catch (err) {
	      this.setState({
	        reqBody: {},
	        canSubmit: false
	      });
	    }
	  },
	
	  _buildRequestForm: function _buildRequestForm() {
	    var body = "";
	    if ("POST" === this.state.method || "PUT" === this.state.method) {
	      body = React.createElement(
	        "div",
	        { className: "form-group" },
	        React.createElement(
	          "label",
	          null,
	          "Form body (JSON)"
	        ),
	        React.createElement(JsonEditor, {
	          onChange: this._onBodyChange,
	          value: this.state.reqBody,
	          height: "300px" })
	      );
	    }
	
	    var urlQryStr = $.param(this.state.reqQuery);
	
	    return React.createElement(
	      "form",
	      { onSubmit: this.onSubmit },
	      React.createElement(
	        "div",
	        { className: "form-group" },
	        React.createElement(
	          "label",
	          null,
	          "Query string (JSON): ",
	          React.createElement(
	            "strong",
	            null,
	            urlQryStr
	          )
	        ),
	        React.createElement(JsonEditor, {
	          onChange: this._onQueryStringChange,
	          height: "100px",
	          value: this.state.reqQuery })
	      ),
	      { body: body },
	      React.createElement(SubmitBtn, { label: "Run", disabled: !this.state.canSubmit })
	    );
	  },
	
	  render: function render() {
	    var error = this.state.error ? React.createElement(
	      "div",
	      { className: "error" },
	      this.state.error
	    ) : "";
	
	    return React.createElement(
	      "div",
	      { className: "page-route" },
	      React.createElement(
	        "h2",
	        null,
	        this.state.method,
	        " ",
	        this.state.url
	      ),
	      this._buildRequestForm(),
	      this._buildResult()
	    );
	  } });

/***/ }

});
//# sourceMappingURL=data:application/json;base64,